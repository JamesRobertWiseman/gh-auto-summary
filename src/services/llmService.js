import { createLogger } from "../utils/logger.js";

const logger = createLogger("LLMService");

export class LLMService {
  /**
   * Generate PR summary using GitHub Copilot API
   */
  async generatePRSummary(prData, diff, commits = [], token) {
    try {
      logger.debug(`Generating summary for PR: ${prData.title}`);

      if (!token) {
        throw new Error("GitHub token required for Copilot API");
      }

      const prompt = this._createSummaryPrompt(prData, diff, commits);
      const generatedContent = await this._generateWithCopilot(prompt, token);

      logger.info("Successfully generated PR summary");
      return generatedContent;
    } catch (error) {
      logger.error("Failed to generate PR summary:", error.message);
      return this._createErrorSummary(error.message);
    }
  }

  /**
   * Generate chat response using GitHub Copilot API
   */
  async generateChatResponse(messages, token) {
    try {
      logger.debug("Generating chat response");

      if (!token) {
        return "I'm sorry, but I need a GitHub token to provide AI assistance.";
      }

      const response = await this._generateChatWithCopilot(messages, token);

      logger.info("Successfully generated chat response");
      return response;
    } catch (error) {
      logger.error("Failed to generate chat response:", error.message);
      return "I'm sorry, I encountered an error while processing your request.";
    }
  }

  /**
   * Generate content using GitHub Copilot API
   */
  async _generateWithCopilot(prompt, token) {
    const response = await fetch(
      "https://api.githubcopilot.com/chat/completions",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          messages: [
            {
              role: "system",
              content:
                "You are a helpful assistant that analyzes code changes and generates clear, professional summaries and changelog entries. You understand conventional commits and can create well-structured changelogs.",
            },
            {
              role: "user",
              content: prompt,
            },
          ],
          stream: false,
        }),
      }
    );

    if (!response.ok) {
      throw new Error(
        `GitHub LLM API error: ${response.status} ${response.statusText}`
      );
    }

    const data = await response.json();
    const generatedContent = data.choices[0]?.message?.content;

    if (!generatedContent) {
      throw new Error("No content generated by GitHub Copilot");
    }

    return generatedContent;
  }

  /**
   * Generate chat response using GitHub Copilot API
   */
  async _generateChatWithCopilot(messages, token) {
    const response = await fetch(
      "https://api.githubcopilot.com/chat/completions",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          messages: [
            {
              role: "system",
              content:
                "You are a helpful assistant for GitHub developers. You can help with code review, pull request analysis, and general development questions.",
            },
            ...messages,
          ],
          stream: false,
        }),
      }
    );

    if (!response.ok) {
      const errorBody = await response.text();
      throw new Error(
        `GitHub Copilot API error: ${response.status} ${response.statusText} - ${errorBody}`
      );
    }

    const data = await response.json();
    return (
      data.choices[0]?.message?.content || "I couldn't generate a response."
    );
  }

  /**
   * Create comprehensive prompt for PR analysis
   */
  _createSummaryPrompt(prData, diff, commits) {
    const maxDiffLength = 8000;
    const truncatedDiff =
      diff.length > maxDiffLength
        ? diff.substring(0, maxDiffLength) + "\n\n... (diff truncated)"
        : diff;

    let prompt = `Please analyze this pull request and provide a comprehensive summary.

**Pull Request Information:**
- Title: ${prData.title}
- Author: ${prData.user?.login || "Unknown"}
- Status: ${prData.state}
- Files Changed: ${prData.changed_files || "Unknown"}
- Additions: ${prData.additions || 0}
- Deletions: ${prData.deletions || 0}`;

    if (prData.body && prData.body.trim()) {
      prompt += `\n- Description: ${prData.body}`;
    }

    if (commits && commits.length > 0) {
      prompt += `\n\n**Commits (${commits.length}):**\n`;
      commits.forEach((commit, index) => {
        if (index < 10) {
          prompt += `- ${commit.sha}: ${commit.message} (by ${commit.author})\n`;
        }
      });
      if (commits.length > 10) {
        prompt += `... and ${commits.length - 10} more commits\n`;
      }
    }

    prompt += `\n\n**Code Changes:**
\`\`\`diff
${truncatedDiff}
\`\`\`

Please provide:
1. **Summary**: A clear overview of what this PR accomplishes
2. **Key Changes**: The main technical changes made
3. **Impact**: How these changes affect the codebase
4. **Changelog**: Structured list of changes suitable for release notes

Format your response in clear markdown with appropriate sections.`;

    return prompt;
  }

  /**
   * Create error summary when generation fails
   */
  _createErrorSummary(errorMessage) {
    return `## Summary Generation Failed

I was unable to generate a comprehensive summary for this pull request.

**Error:** ${errorMessage}

**Manual Review Required:** Please review the pull request manually to understand the changes.

## Basic Information Available
- Pull request requires manual analysis
- Check the diff and commit messages for details
- Review the description provided by the author`;
  }
}

export const llmService = new LLMService();
